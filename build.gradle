plugins {
    id 'java'
    id 'jacoco'
    id 'eclipse'
    id 'idea'
    id 'org.springframework.boot' version '3.3.13'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.techcorp'
version = '1.0.0-SNAPSHOT'
description = 'Prosty system zarzÄ…dzania pracownikami dla TechCorp'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.code.gson:gson:2.10.1'
    
    // JUnit 5
    testImplementation platform('org.junit:junit-bom:5.10.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // Mockito
    testImplementation 'org.mockito:mockito-core:5.10.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.10.0'

    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/Main.class',
                '**/AnalyticsDemo.class',
                '**/model/**',
                '**/exception/**'
            ])
        }))
    }
}

tasks.register('runAnalyticsDemo', JavaExec) {
    group = 'application'
    description = 'Uruchamia demo metod analitycznych'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.techcorp.AnalyticsDemo'
}
